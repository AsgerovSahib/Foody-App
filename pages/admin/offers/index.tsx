import Barchart from "@/share/components/LineChart";
import { Navbar } from "@/share/components/Navbar";
import { AdminAside } from "@/share/components/adminAside";
import { AdminLeftModal } from "@/share/components/adminLeftModal";
import AdminOffersTableT from "@/share/components/adminOffersTable";
import AdminOrdersTable from "@/share/components/adminOrdersTable";
import AdminSecondTitle from "@/share/components/adminSecondTitle";
import OrdersChart from "@/share/components/ordersChart";
import { createOffer, getOffer } from "@/share/services/axios";
import Head from "next/head";
import React, { useEffect, useRef, useState } from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const adminOffers = () => {
  const [isHiddenModal, setIsHiddenModal] = useState<boolean>(true);
  const [isOfferImage, setIsOfferImage] = useState<string>("");
  const [offers, setOffers] = useState([]);

  const titleOfferRef = useRef<HTMLInputElement>(null);
  const descOfferRef = useRef<HTMLInputElement>(null);

  function changeHidden(): void {
    setIsHiddenModal((prev: boolean) => !prev);
  }

  //^ CREATE OFFER
  async function handleCreateOffer() {
    const titleOffer = titleOfferRef.current?.value;
    const descOffer = descOfferRef.current?.value;

    if (titleOffer == "" || descOffer == "" || isOfferImage == "") {
      toast.warning("Fill the inputs correctly!");
    } else {
      const offerValues = {
        name: titleOffer,
        description: descOffer,
        img_url: isOfferImage,
      };

      const res = await createOffer(offerValues);
      console.log(res);

      if (res?.status == 200 || res?.status == 201) {
        toast.success("Offer added successfully!");
        if (titleOfferRef.current) titleOfferRef.current.value = "";
        if (descOfferRef.current) descOfferRef.current.value = "";
      }
    }
  }

  //^ ADD IMAGE
  const handleAddNewImage = (image_url: string) => {
    setIsOfferImage(image_url);
  };

  //^ REDNER OFFERS

  async function offersRender() {
    try {
      const res = await getOffer();
      console.log(res);
      const offersArray = res?.data.result.data;
      setOffers(offersArray);
    } catch (err) {
      console.log(err);
    }
  }

  useEffect(() => {
    offersRender();
  }, [isHiddenModal]);

  return (
    <>
      <Head>
        <title>Admin | Offer</title>
        <meta name="Products" content="Generated by create next app" />
        <link rel="icon" href="/admin-icon.png" />
      </Head>
      <div className=" bg-textBlack min-h-screen px-4">
        <ToastContainer />
        <Navbar adminNavbar={true} />

        <AdminLeftModal
          p="Add Offer"
          p1="Upload Image"
          p2="Add your Offer information"
          btn="Create Offer"
          mod="4"
          form_titleRef={titleOfferRef}
          form_descRef={descOfferRef}
          onClickClose={changeHidden}
          hidden={isHiddenModal}
          ButtonOnClick={handleCreateOffer}
          getImgUrl={handleAddNewImage}
        />
        <main className="flex">
          <div className=" hidden sm:block">
            <AdminAside />
          </div>

          <div className=" gap-4 hidden">
            <OrdersChart />
            <Barchart />
          </div>

          <section className=" w-full">
            <div className="m-5">
              <AdminSecondTitle
                onClick={changeHidden}
                name="Offers"
                p1="Offers"
              />
            </div>

            {/* <div className=" w-full sm:w-auto m-5 flex flex-wrap gap-4 justify-center">
              {item.map((data) => (
                <AdminRestouransCard data={data} />
              ))}
            </div> */}
            <div className="p-5">
              <table className=" w-full bg-white ">
                <thead className="h-16  text-center text-sm not-italic font-semibold leading-6">
                  <tr>
                    <td>ID</td>
                    <td>image</td>
                    <td>Title</td>
                    <td>Descriptions</td>

                    <td></td>
                  </tr>
                </thead>
                <tbody className="">
                  {/* {item.map((data) => (
                    // <AdminOrdersTable data={data} />
                    <AdminOffersTableT data={data} />
                  ))} */}
                  {offers.map((data: any) => (
                    <AdminOffersTableT key={data.id} data={data} />
                  ))}
                </tbody>
              </table>
            </div>
          </section>
        </main>
      </div>
    </>
  );
};

export default adminOffers;
