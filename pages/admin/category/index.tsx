import type { NextPage } from "next";
import "react-toastify/dist/ReactToastify.css";
import Head from "next/head";
import { AdminHeader } from "../../../share/components/adminHeader";
import { AdminAside } from "../../../share/components/adminAside";
import { AdminLeftModal } from "../../../share/components/adminLeftModal";
import { useRef, useState } from "react";
import AdminCategory from "../../../share/components/adminCategory";
import AdminSecondTitle from "../../../share/components/adminSecondTitle";
import { UpperCase } from "@/share/services/upperCase";
import { Form, postCategory } from "@/share/services/axios";
import { ToastContainer, toast } from "react-toastify";

interface CategoryType {
  id: number;
  image: string;
  name: string;
  slug: string;
}

const AdminProducts: NextPage = () => {
  const [isHiddenModal, setIsHiddenModal] = useState<boolean>(true);

  const categoryRef = useRef<HTMLInputElement>(null);

  const slugRef = useRef<HTMLInputElement>(null);

  const imgRef = useRef<HTMLInputElement>(null);

  const [imgUrl, setImgUrl] = useState<string>("");

  function getImgUrl(url: string): void {
    //  console.log(url);
    setImgUrl(url);
  }
  async function addCategory() {
    const category = categoryRef?.current?.value;
    const slug = slugRef?.current?.value;
    const img = imgUrl;

    if (!isInputValid(category, slug, img)) {
      toast.warning("Please fill all the inputs!");
      return;
    }

    const form: Form = {
      name: UpperCase(category),
      slug: slug,
      img_url: img,
    };

    try {
      const res = await postCategory(form);

      if (res?.status === 201) {
        if (categoryRef.current && slugRef.current) {
          categoryRef.current.value = "";
          slugRef.current.value = "";
        }

        setTimeout(() => {
          changeHidden();
        }, 500);

        toast.success("Category created successfully!");
      }
    } catch (error) {
      console.error("Error adding category:", error);
      toast.error("An error occurred while adding the category.");
    }
  }

  function isInputValid(
    category: string | undefined,
    slug: string | undefined,
    img: string
  ): boolean {
    return !!category && !!slug && !!img;
  }

  function changeHidden(): void {
    setIsHiddenModal((prev: boolean) => !prev);
    // console.log(isHiddenModal);
  }

  let categoryData: CategoryType[] = [
    {
      id: 2000,
      image: "/adminMarqarita.svg",
      name: "pizza",
      slug: "Yummy-pizza",
    },
    {
      id: 2001,
      image: "/adminMarqarita.svg",
      name: "hotdog",
      slug: "Yummy-pizza",
    },
    {
      id: 2002,
      image: "/adminMarqarita.svg",
      name: "pizza",
      slug: "Yummy-pizza",
    },
    {
      id: 2003,
      image: "/adminMarqarita.svg",
      name: "pizza",
      slug: "Yummy-pizza",
    },
  ];
  // console.log("categoryData", categoryData);

  return (
    <>
      <Head>
        <title>admin</title>
        <meta name="Products" content="Generated by create next app" />
        <link rel="icon" href="/admin-icon.png" />
      </Head>

      <div className=" bg-textBlack min-h-screen px-4">
        <ToastContainer />
        <AdminHeader />

        <main className="flex">
          <div className=" hidden sm:block">
            <AdminAside />
          </div>

          <section className=" w-[100%] m-5">
            <AdminLeftModal
              onClickClose={changeHidden}
              mod="3"
              p="Add Category  "
              p1="Upload  image"
              p2="Add your Category information"
              hidden={isHiddenModal}
              btn="Create Category"
              categoryRef={categoryRef}
              ButtonOnClick={addCategory}
              getImgUrl={getImgUrl}
              slugRef={slugRef}
              imgRef={imgRef}
            />
            {/* <div className=" flex  justify-between text-sm  font-semibold h-16 items-center px-8"></div> */}
            <AdminSecondTitle
              onClick={changeHidden}
              name="Catagory"
              p1="Catagory"
            />
            <div className=" w-[100%]   bg-white">
              <table className="w-[100%] ">
                <thead className="h-16 text-sm px-8">
                  <tr>
                    <th>ID</th>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Slug</th>
                    <th>Edit and delete</th>
                  </tr>
                </thead>

                <tbody>
                  {categoryData.map((item: CategoryType) => (
                    <AdminCategory key={item.id} item={item} />
                  ))}
                </tbody>
              </table>
            </div>
          </section>
        </main>
      </div>
    </>
  );
};

export default AdminProducts;
